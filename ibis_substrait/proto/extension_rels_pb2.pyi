"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""
import builtins
import google.protobuf.descriptor
import google.protobuf.internal.containers
import google.protobuf.message
from . import substrait
import typing
import typing_extensions
DESCRIPTOR: google.protobuf.descriptor.FileDescriptor

class AsOfJoinRel(google.protobuf.message.Message):
    """As-Of-Join relation"""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    class AsOfJoinKey(google.protobuf.message.Message):
        """As-Of-Join key"""
        DESCRIPTOR: google.protobuf.descriptor.Descriptor
        ON_FIELD_NUMBER: builtins.int
        BY_FIELD_NUMBER: builtins.int

        @property
        def on(self) -> substrait.ibis.algebra_pb2.Expression:
            """A field reference defining the on-key
            The type and units of the referenced field must be the same across all inputs
            """
            pass

        @property
        def by(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[substrait.ibis.algebra_pb2.Expression]:
            """A list of field references defining the by-key
            The types corresponding to the referenced fields must be the same across all inputs
            """
            pass

        def __init__(self, *, on: typing.Optional[substrait.ibis.algebra_pb2.Expression]=..., by: typing.Optional[typing.Iterable[substrait.ibis.algebra_pb2.Expression]]=...) -> None:
            ...

        def HasField(self, field_name: typing_extensions.Literal['on', b'on']) -> builtins.bool:
            ...

        def ClearField(self, field_name: typing_extensions.Literal['by', b'by', 'on', b'on']) -> None:
            ...
    KEYS_FIELD_NUMBER: builtins.int
    TOLERANCE_FIELD_NUMBER: builtins.int

    @property
    def keys(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___AsOfJoinRel.AsOfJoinKey]:
        """One key per input relation, each key describing how to join the corresponding input"""
        pass
    tolerance: builtins.int
    'As-Of tolerance, in units of the on-key'

    def __init__(self, *, keys: typing.Optional[typing.Iterable[global___AsOfJoinRel.AsOfJoinKey]]=..., tolerance: builtins.int=...) -> None:
        ...

    def ClearField(self, field_name: typing_extensions.Literal['keys', b'keys', 'tolerance', b'tolerance']) -> None:
        ...
global___AsOfJoinRel = AsOfJoinRel

class NamedTapRel(google.protobuf.message.Message):
    """Named tap relation

    A tap is a relation having a single input relation that it passes through, while also
    causing some side-effect, e.g., writing to external storage.
    """
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    KIND_FIELD_NUMBER: builtins.int
    NAME_FIELD_NUMBER: builtins.int
    COLUMNS_FIELD_NUMBER: builtins.int
    kind: typing.Text
    'The kind of tap'
    name: typing.Text
    'A name used to configure the tap, e.g., a URI defining the destination of writing'

    @property
    def columns(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[typing.Text]:
        """Column names for the tap's output. If specified there must be one name per field.
        If empty, field names will be automatically generated.
        """
        pass

    def __init__(self, *, kind: typing.Text=..., name: typing.Text=..., columns: typing.Optional[typing.Iterable[typing.Text]]=...) -> None:
        ...

    def ClearField(self, field_name: typing_extensions.Literal['columns', b'columns', 'kind', b'kind', 'name', b'name']) -> None:
        ...
global___NamedTapRel = NamedTapRel